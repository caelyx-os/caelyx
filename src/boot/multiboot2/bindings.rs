#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

/* automatically generated by rust-bindgen 0.72.0 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        unsafe { ::core::slice::from_raw_parts(self.as_ptr(), len) }
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        unsafe { ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len) }
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
#[repr(C)]
pub struct __BindgenUnionField<T>(::core::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::core::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        unsafe { ::core::mem::transmute(self) }
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        unsafe { ::core::mem::transmute(self) }
    }
}
impl<T> ::core::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::core::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        *self
    }
}
impl<T> ::core::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::core::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::core::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::core::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::core::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::core::cmp::Eq for __BindgenUnionField<T> {}
pub const MULTIBOOT_HEADER: u32 = 1;
pub const MULTIBOOT_SEARCH: u32 = 32768;
pub const MULTIBOOT_HEADER_ALIGN: u32 = 8;
pub const MULTIBOOT2_HEADER_MAGIC: u32 = 3897708758;
pub const MULTIBOOT2_BOOTLOADER_MAGIC: u32 = 920085129;
pub const MULTIBOOT_MOD_ALIGN: u32 = 4096;
pub const MULTIBOOT_INFO_ALIGN: u32 = 8;
pub const MULTIBOOT_TAG_ALIGN: u32 = 8;
pub const MULTIBOOT_TAG_TYPE_END: u32 = 0;
pub const MULTIBOOT_TAG_TYPE_CMDLINE: u32 = 1;
pub const MULTIBOOT_TAG_TYPE_BOOT_LOADER_NAME: u32 = 2;
pub const MULTIBOOT_TAG_TYPE_MODULE: u32 = 3;
pub const MULTIBOOT_TAG_TYPE_BASIC_MEMINFO: u32 = 4;
pub const MULTIBOOT_TAG_TYPE_BOOTDEV: u32 = 5;
pub const MULTIBOOT_TAG_TYPE_MMAP: u32 = 6;
pub const MULTIBOOT_TAG_TYPE_VBE: u32 = 7;
pub const MULTIBOOT_TAG_TYPE_FRAMEBUFFER: u32 = 8;
pub const MULTIBOOT_TAG_TYPE_ELF_SECTIONS: u32 = 9;
pub const MULTIBOOT_TAG_TYPE_APM: u32 = 10;
pub const MULTIBOOT_TAG_TYPE_EFI32: u32 = 11;
pub const MULTIBOOT_TAG_TYPE_EFI64: u32 = 12;
pub const MULTIBOOT_TAG_TYPE_SMBIOS: u32 = 13;
pub const MULTIBOOT_TAG_TYPE_ACPI_OLD: u32 = 14;
pub const MULTIBOOT_TAG_TYPE_ACPI_NEW: u32 = 15;
pub const MULTIBOOT_TAG_TYPE_NETWORK: u32 = 16;
pub const MULTIBOOT_TAG_TYPE_EFI_MMAP: u32 = 17;
pub const MULTIBOOT_TAG_TYPE_EFI_BS: u32 = 18;
pub const MULTIBOOT_TAG_TYPE_EFI32_IH: u32 = 19;
pub const MULTIBOOT_TAG_TYPE_EFI64_IH: u32 = 20;
pub const MULTIBOOT_TAG_TYPE_LOAD_BASE_ADDR: u32 = 21;
pub const MULTIBOOT_HEADER_TAG_END: u32 = 0;
pub const MULTIBOOT_HEADER_TAG_INFORMATION_REQUEST: u32 = 1;
pub const MULTIBOOT_HEADER_TAG_ADDRESS: u32 = 2;
pub const MULTIBOOT_HEADER_TAG_ENTRY_ADDRESS: u32 = 3;
pub const MULTIBOOT_HEADER_TAG_CONSOLE_FLAGS: u32 = 4;
pub const MULTIBOOT_HEADER_TAG_FRAMEBUFFER: u32 = 5;
pub const MULTIBOOT_HEADER_TAG_MODULE_ALIGN: u32 = 6;
pub const MULTIBOOT_HEADER_TAG_EFI_BS: u32 = 7;
pub const MULTIBOOT_HEADER_TAG_ENTRY_ADDRESS_EFI32: u32 = 8;
pub const MULTIBOOT_HEADER_TAG_ENTRY_ADDRESS_EFI64: u32 = 9;
pub const MULTIBOOT_HEADER_TAG_RELOCATABLE: u32 = 10;
pub const MULTIBOOT_ARCHITECTURE_I386: u32 = 0;
pub const MULTIBOOT_ARCHITECTURE_MIPS32: u32 = 4;
pub const MULTIBOOT_HEADER_TAG_OPTIONAL: u32 = 1;
pub const MULTIBOOT_LOAD_PREFERENCE_NONE: u32 = 0;
pub const MULTIBOOT_LOAD_PREFERENCE_LOW: u32 = 1;
pub const MULTIBOOT_LOAD_PREFERENCE_HIGH: u32 = 2;
pub const MULTIBOOT_CONSOLE_FLAGS_CONSOLE_REQUIRED: u32 = 1;
pub const MULTIBOOT_CONSOLE_FLAGS_EGA_TEXT_SUPPORTED: u32 = 2;
pub const MULTIBOOT_MEMORY_AVAILABLE: u32 = 1;
pub const MULTIBOOT_MEMORY_RESERVED: u32 = 2;
pub const MULTIBOOT_MEMORY_ACPI_RECLAIMABLE: u32 = 3;
pub const MULTIBOOT_MEMORY_NVS: u32 = 4;
pub const MULTIBOOT_MEMORY_BADRAM: u32 = 5;
pub const MULTIBOOT_FRAMEBUFFER_TYPE_INDEXED: u32 = 0;
pub const MULTIBOOT_FRAMEBUFFER_TYPE_RGB: u32 = 1;
pub const MULTIBOOT_FRAMEBUFFER_TYPE_EGA_TEXT: u32 = 2;
pub type multiboot_uint8_t = ::core::ffi::c_uchar;
pub type multiboot_uint16_t = ::core::ffi::c_ushort;
pub type multiboot_uint32_t = ::core::ffi::c_uint;
pub type multiboot_uint64_t = ::core::ffi::c_ulonglong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_header {
    pub magic: multiboot_uint32_t,
    pub architecture: multiboot_uint32_t,
    pub header_length: multiboot_uint32_t,
    pub checksum: multiboot_uint32_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_header_tag {
    pub type_: multiboot_uint16_t,
    pub flags: multiboot_uint16_t,
    pub size: multiboot_uint32_t,
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct multiboot_header_tag_information_request {
    pub type_: multiboot_uint16_t,
    pub flags: multiboot_uint16_t,
    pub size: multiboot_uint32_t,
    pub requests: __IncompleteArrayField<multiboot_uint32_t>,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_header_tag_address {
    pub type_: multiboot_uint16_t,
    pub flags: multiboot_uint16_t,
    pub size: multiboot_uint32_t,
    pub header_addr: multiboot_uint32_t,
    pub load_addr: multiboot_uint32_t,
    pub load_end_addr: multiboot_uint32_t,
    pub bss_end_addr: multiboot_uint32_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_header_tag_entry_address {
    pub type_: multiboot_uint16_t,
    pub flags: multiboot_uint16_t,
    pub size: multiboot_uint32_t,
    pub entry_addr: multiboot_uint32_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_header_tag_console_flags {
    pub type_: multiboot_uint16_t,
    pub flags: multiboot_uint16_t,
    pub size: multiboot_uint32_t,
    pub console_flags: multiboot_uint32_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_header_tag_framebuffer {
    pub type_: multiboot_uint16_t,
    pub flags: multiboot_uint16_t,
    pub size: multiboot_uint32_t,
    pub width: multiboot_uint32_t,
    pub height: multiboot_uint32_t,
    pub depth: multiboot_uint32_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_header_tag_module_align {
    pub type_: multiboot_uint16_t,
    pub flags: multiboot_uint16_t,
    pub size: multiboot_uint32_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_header_tag_relocatable {
    pub type_: multiboot_uint16_t,
    pub flags: multiboot_uint16_t,
    pub size: multiboot_uint32_t,
    pub min_addr: multiboot_uint32_t,
    pub max_addr: multiboot_uint32_t,
    pub align: multiboot_uint32_t,
    pub preference: multiboot_uint32_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_color {
    pub red: multiboot_uint8_t,
    pub green: multiboot_uint8_t,
    pub blue: multiboot_uint8_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_mmap_entry {
    pub addr: multiboot_uint64_t,
    pub len: multiboot_uint64_t,
    pub type_: multiboot_uint32_t,
    pub zero: multiboot_uint32_t,
}
pub type multiboot_memory_map_t = multiboot_mmap_entry;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_tag {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct multiboot_tag_string {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub string: __IncompleteArrayField<::core::ffi::c_char>,
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct multiboot_tag_module {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub mod_start: multiboot_uint32_t,
    pub mod_end: multiboot_uint32_t,
    pub cmdline: __IncompleteArrayField<::core::ffi::c_char>,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_tag_basic_meminfo {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub mem_lower: multiboot_uint32_t,
    pub mem_upper: multiboot_uint32_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_tag_bootdev {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub biosdev: multiboot_uint32_t,
    pub slice: multiboot_uint32_t,
    pub part: multiboot_uint32_t,
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct multiboot_tag_mmap {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub entry_size: multiboot_uint32_t,
    pub entry_version: multiboot_uint32_t,
    pub entries: __IncompleteArrayField<multiboot_mmap_entry>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct multiboot_vbe_info_block {
    pub external_specification: [multiboot_uint8_t; 512usize],
}
impl Default for multiboot_vbe_info_block {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct multiboot_vbe_mode_info_block {
    pub external_specification: [multiboot_uint8_t; 256usize],
}
impl Default for multiboot_vbe_mode_info_block {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct multiboot_tag_vbe {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub vbe_mode: multiboot_uint16_t,
    pub vbe_interface_seg: multiboot_uint16_t,
    pub vbe_interface_off: multiboot_uint16_t,
    pub vbe_interface_len: multiboot_uint16_t,
    pub vbe_control_info: multiboot_vbe_info_block,
    pub vbe_mode_info: multiboot_vbe_mode_info_block,
}
impl Default for multiboot_tag_vbe {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_tag_framebuffer_common {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub framebuffer_addr: multiboot_uint64_t,
    pub framebuffer_pitch: multiboot_uint32_t,
    pub framebuffer_width: multiboot_uint32_t,
    pub framebuffer_height: multiboot_uint32_t,
    pub framebuffer_bpp: multiboot_uint8_t,
    pub framebuffer_type: multiboot_uint8_t,
    pub reserved: multiboot_uint16_t,
}
#[repr(C)]
pub struct multiboot_tag_framebuffer {
    pub common: multiboot_tag_framebuffer_common,
    pub __bindgen_anon_1: multiboot_tag_framebuffer__bindgen_ty_1,
}
#[repr(C)]
pub struct multiboot_tag_framebuffer__bindgen_ty_1 {
    pub __bindgen_anon_1:
        __BindgenUnionField<multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_1>,
    pub __bindgen_anon_2:
        __BindgenUnionField<multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_2>,
    pub bindgen_union_field: [u16; 3usize],
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_1 {
    pub framebuffer_palette_num_colors: multiboot_uint16_t,
    pub framebuffer_palette: __IncompleteArrayField<multiboot_color>,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_tag_framebuffer__bindgen_ty_1__bindgen_ty_2 {
    pub framebuffer_red_field_position: multiboot_uint8_t,
    pub framebuffer_red_mask_size: multiboot_uint8_t,
    pub framebuffer_green_field_position: multiboot_uint8_t,
    pub framebuffer_green_mask_size: multiboot_uint8_t,
    pub framebuffer_blue_field_position: multiboot_uint8_t,
    pub framebuffer_blue_mask_size: multiboot_uint8_t,
}
impl Default for multiboot_tag_framebuffer__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for multiboot_tag_framebuffer {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct multiboot_tag_elf_sections {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub num: multiboot_uint32_t,
    pub entsize: multiboot_uint32_t,
    pub shndx: multiboot_uint32_t,
    pub sections: __IncompleteArrayField<::core::ffi::c_char>,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_tag_apm {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub version: multiboot_uint16_t,
    pub cseg: multiboot_uint16_t,
    pub offset: multiboot_uint32_t,
    pub cseg_16: multiboot_uint16_t,
    pub dseg: multiboot_uint16_t,
    pub flags: multiboot_uint16_t,
    pub cseg_len: multiboot_uint16_t,
    pub cseg_16_len: multiboot_uint16_t,
    pub dseg_len: multiboot_uint16_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_tag_efi32 {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub pointer: multiboot_uint32_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_tag_efi64 {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub pointer: multiboot_uint64_t,
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct multiboot_tag_smbios {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub major: multiboot_uint8_t,
    pub minor: multiboot_uint8_t,
    pub reserved: [multiboot_uint8_t; 6usize],
    pub tables: __IncompleteArrayField<multiboot_uint8_t>,
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct multiboot_tag_old_acpi {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub rsdp: __IncompleteArrayField<multiboot_uint8_t>,
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct multiboot_tag_new_acpi {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub rsdp: __IncompleteArrayField<multiboot_uint8_t>,
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct multiboot_tag_network {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub dhcpack: __IncompleteArrayField<multiboot_uint8_t>,
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct multiboot_tag_efi_mmap {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub descr_size: multiboot_uint32_t,
    pub descr_vers: multiboot_uint32_t,
    pub efi_mmap: __IncompleteArrayField<multiboot_uint8_t>,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_tag_efi32_ih {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub pointer: multiboot_uint32_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_tag_efi64_ih {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub pointer: multiboot_uint64_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multiboot_tag_load_base_addr {
    pub type_: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub load_base_addr: multiboot_uint32_t,
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct multiboot_info {
    pub total_size: multiboot_uint32_t,
    pub reserved: multiboot_uint32_t,
    pub tags: __IncompleteArrayField<multiboot_tag>,
}
